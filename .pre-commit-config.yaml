# Pre-commit hooks for reliability and code quality enforcement
# Install with: pip install pre-commit && pre-commit install

repos:
  # Code formatting and linting
  - repo: https://github.com/astral-sh/ruff-pre-commit
    rev: v0.6.2
    hooks:
      # Linting
      - id: ruff
        args: [--fix, --exit-non-zero-on-fix]
        types: [python]
      # Formatting  
      - id: ruff-format
        types: [python]

  # Python-specific checks
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.5.0
    hooks:
      # Basic file checks
      - id: trailing-whitespace
      - id: end-of-file-fixer
      - id: check-yaml
      - id: check-json
      - id: check-toml
      - id: check-merge-conflict
      - id: check-added-large-files
        args: ['--maxkb=1000']  # Prevent large files
      
      # Python-specific
      - id: check-ast
      - id: debug-statements
      - id: name-tests-test
        args: ['--pytest-test-first']

  # Security scanning
  - repo: https://github.com/PyCQA/bandit
    rev: 1.7.5
    hooks:
      - id: bandit
        args: ['-c', 'pyproject.toml']
        additional_dependencies: ['bandit[toml]']
        exclude: ^tests/

  # Type checking (optional, enable if mypy is configured)
  # - repo: https://github.com/pre-commit/mirrors-mypy
  #   rev: v1.6.1
  #   hooks:
  #     - id: mypy
  #       additional_dependencies: [types-all]

  # Dependency vulnerability scanning
  - repo: https://github.com/Lucas-C/pre-commit-hooks-safety
    rev: v1.3.2
    hooks:
      - id: python-safety-dependencies-check
        files: pyproject.toml

  # Documentation checks
  - repo: https://github.com/pycqa/doc8
    rev: v1.1.1
    hooks:
      - id: doc8
        args: ['--max-line-length=100']
        files: \.rst$|\.md$

  # Commit message format (conventional commits)
  - repo: https://github.com/compilerla/conventional-pre-commit
    rev: v3.0.0
    hooks:
      - id: conventional-pre-commit
        stages: [commit-msg]
        args: [optional-scope, feat, fix, docs, style, refactor, perf, test, build, ci, chore, revert]

# Configuration
default_stages: [commit]
fail_fast: false

# Custom local hooks for reliability checks
repos:
  - repo: local
    hooks:
      # Test determinism check (runs a subset of tests multiple times)
      - id: test-determinism-check
        name: Test Determinism Check
        entry: bash -c 'cd apps/api && python -m pytest tests/test_health.py -q --tb=no -x --count=3 > /dev/null 2>&1 || (echo "❌ Non-deterministic tests detected in API" && exit 1)'
        language: system
        pass_filenames: false
        stages: [commit]
        
      - id: test-determinism-check-worker
        name: Test Determinism Check (Worker)
        entry: bash -c 'cd apps/worker && python -m pytest tests/test_cli.py -q --tb=no -x --count=3 > /dev/null 2>&1 || (echo "❌ Non-deterministic tests detected in Worker" && exit 1)'
        language: system
        pass_filenames: false
        stages: [commit]

      # Coverage threshold check
      - id: coverage-check-api
        name: Coverage Check (API)
        entry: bash -c 'cd apps/api && python -m pytest tests/ --cov=app --cov-fail-under=85 -q > /dev/null 2>&1 || (echo "❌ API test coverage below 85%" && exit 1)'
        language: system
        pass_filenames: false
        files: ^apps/api/
        stages: [commit]
        
      - id: coverage-check-worker
        name: Coverage Check (Worker)
        entry: bash -c 'cd apps/worker && python -m pytest tests/ --cov=worker --cov-fail-under=85 -q > /dev/null 2>&1 || (echo "❌ Worker test coverage below 85%" && exit 1)'
        language: system
        pass_filenames: false
        files: ^apps/worker/
        stages: [commit]

      # Reliability pattern enforcement
      - id: reliability-pattern-check
        name: Reliability Pattern Check
        entry: python scripts/check_reliability_patterns.py
        language: system
        files: \.(py)$
        stages: [commit]

# CI skip option
ci:
  skip: [test-determinism-check, test-determinism-check-worker, coverage-check-api, coverage-check-worker]