"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[44],{8044:function(e,t,s){function r(e){return new Promise(t=>setTimeout(t,e))}s.d(t,{r9:function(){return f},xp:function(){return w},WM:function(){return R}});class a extends Error{constructor(e,t,s,r){super(e),this.name="ApiError",this.code=t,this.status=s,this.details=r}}function i(e,t,s,r){return new a(e,t,s,r)}class n{on(e,t){return this.listeners[e]||(this.listeners[e]=[]),this.listeners[e].push(t),()=>{let s=this.listeners[e];if(s){let e=s.indexOf(t);e>-1&&s.splice(e,1)}}}emit(e,t){let s=this.listeners[e];s&&s.forEach(e=>e(t))}removeAllListeners(e){e?delete this.listeners[e]:this.listeners={}}constructor(){this.listeners={}}}let o=new n;async function c(e){let t=await e.arrayBuffer();return Array.from(new Uint8Array(await crypto.subtle.digest("SHA-256",t))).map(e=>e.toString(16).padStart(2,"0")).join("")}var u,l,h=s(6629);(u=l||(l={})).CLOSED="closed",u.OPEN="open",u.HALF_OPEN="half-open";class d{async execute(e){if("open"===this.state){if(Date.now()-this.lastFailureTime>this.recoveryTimeout)this.state="half-open";else throw i("Circuit breaker is open - service temporarily unavailable","CIRCUIT_OPEN")}try{let t=await e();return this.onSuccess(),t}catch(e){throw this.onFailure(),e}}onSuccess(){this.failureCount=0,this.state="closed"}onFailure(){this.failureCount++,this.lastFailureTime=Date.now(),this.failureCount>=this.failureThreshold&&(this.state="open")}getState(){return this.state}constructor(){this.state="closed",this.failureCount=0,this.lastFailureTime=0,this.failureThreshold=5,this.recoveryTimeout=3e4}}class m{getApiBase(){return this.baseUrl}async enhancedFetch(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},s=arguments.length>2&&void 0!==arguments[2]?arguments[2]:this.defaultTimeout,n=arguments.length>3&&void 0!==arguments[3]?arguments[3]:3,o="".concat(Date.now(),"-").concat(Math.random().toString(36).substr(2,9)),c=new AbortController,u=setTimeout(()=>c.abort(),s),l={...t,signal:c.signal,headers:{"Content-Type":"application/json","X-Request-ID":o,...t.headers}},h=i("Unknown error","UNKNOWN_ERROR");for(let t=0;t<n;t++)try{clearTimeout(u);let a=setTimeout(()=>c.abort(),s),d=await fetch(e,l);if(clearTimeout(a),d.ok)return d;let m=await d.text().catch(()=>"Unknown error"),p=i("HTTP ".concat(d.status,": ").concat(m),"HTTP_ERROR",d.status,{requestId:o,attempt:t+1});if(d.status>=400&&d.status<500&&408!==d.status&&429!==d.status)throw p;if(h=p,t<n-1){let e=Math.min(1e3*Math.pow(2,t),1e4),s=1e3*Math.random();await r(e+s)}}catch(e){var d;if(clearTimeout(u),h=e instanceof a?e:e instanceof Error&&"AbortError"===e.name?i("Request timeout","TIMEOUT",408,{requestId:o,attempt:t+1,timeout:s}):i(e instanceof Error?e.message:"Network error","NETWORK_ERROR",void 0,{requestId:o,attempt:t+1}),!(t<n-1)||(!(d=h).status||d.status>=500||408===d.status||429===d.status?0:1))break;{let e=Math.min(1e3*Math.pow(2,t),1e4),s=1e3*Math.random();await r(e+s)}}throw h}async presignUpload(e,t,s){try{let r=await this.circuitBreaker.execute(async()=>{let r={filename:e,content_type:t};return void 0!==s&&(r.file_size=s),(await this.enhancedFetch("".concat(this.baseUrl,"/v1/uploads/presign"),{method:"POST",body:JSON.stringify(r)})).json()});return{success:!0,data:r}}catch(t){let e=t instanceof a?t:i("Failed to presign upload","PRESIGN_ERROR");return console.error("Presign upload failed:",e),{success:!1,error:e}}}async registerDocument(e){try{let t=await this.circuitBreaker.execute(async()=>(await this.enhancedFetch("".concat(this.baseUrl,"/v1/documents"),{method:"POST",body:JSON.stringify(e)})).json());return{success:!0,data:t}}catch(t){let e=t instanceof a?t:i("Failed to register document","REGISTER_ERROR");return console.error("Document registration failed:",e),{success:!1,error:e}}}async uploadFileToS3(e,t,s,r,n){try{return n||await c(t),o.emit("upload:start",{filename:t.name,size:t.size}),await this.circuitBreaker.execute(async()=>new Promise((a,n)=>{let c=new XMLHttpRequest;c.upload.onprogress=e=>{if(e.lengthComputable){let s=e.loaded/e.total*100;r&&(r.progress=s),o.emit("upload:progress",{progress:s,filename:t.name})}},c.onload=()=>{c.status>=200&&c.status<300?a():n(i("S3 upload failed: ".concat(c.status),"S3_UPLOAD_ERROR",c.status))},c.onerror=()=>{n(i("S3 upload network error","S3_NETWORK_ERROR"))},c.ontimeout=()=>{n(i("S3 upload timeout","S3_TIMEOUT",408))},c.open("PUT",e),c.setRequestHeader("Content-Type",s),c.timeout=this.uploadTimeout,c.send(t)})),o.emit("upload:success",{filename:t.name,documentId:""}),{success:!0}}catch(s){let e=s instanceof a?s:i("S3 upload failed","S3_UPLOAD_ERROR");return o.emit("upload:error",{filename:t.name,error:e}),console.error("S3 upload failed:",e),{success:!1,error:e}}finally{o.emit("upload:complete",{filename:t.name})}}async getDocument(e){try{let t=await this.circuitBreaker.execute(async()=>(await this.enhancedFetch("".concat(this.baseUrl,"/v1/documents/").concat(e))).json());return{success:!0,data:t}}catch(e){return{success:!1,error:e instanceof a?e:i("Failed to get document","GET_DOCUMENT_ERROR")}}}async getHealth(){try{let e=await this.enhancedFetch("".concat(this.baseUrl,"/health"),{},5e3,1),t=await e.json();return{success:!0,data:t}}catch(e){return{success:!1,error:e instanceof a?e:i("Health check failed","HEALTH_CHECK_ERROR")}}}async uploadFile(e,t){try{if(!e)throw i("No file provided","VALIDATION_ERROR");let s=await c(e),r=await this.presignUpload(e.name,e.type,e.size);if(!r.success)return r;let a=await this.uploadFileToS3(r.data.presigned_url,e,e.type,t,s);if(!a.success)return a;let n=await this.registerDocument({s3_key:r.data.s3_key,original_filename:e.name,content_type:e.type,file_size:e.size,sha256_hash:s});if(!n.success)return n;return o.emit("upload:success",{filename:e.name,documentId:n.data.id}),{success:!0,documentId:n.data.id}}catch(s){let t=s instanceof a?s:i("File upload failed","UPLOAD_ERROR");return o.emit("upload:error",{filename:e.name,error:t}),{success:!1,error:t}}}getCircuitBreakerStatus(){return{state:this.circuitBreaker.getState(),isHealthy:"closed"===this.circuitBreaker.getState()}}constructor(){this.circuitBreaker=new d,this.defaultTimeout=3e4,this.uploadTimeout=12e4,this.baseUrl=h.env.NEXT_PUBLIC_API_URL||"http://localhost:8000"}}let p=new m;function f(){return p.getApiBase()}async function w(e,t){let s=await p.presignUpload(e,t);if(s.success)return s.data;throw Error(s.error.message)}async function R(e){let t=await p.registerDocument(e);if(t.success)return t.data;throw Error(t.error.message)}}}]);